function [TP_FILE_NAMES, TP_FILE_TAGS, CF_INDEX_MAP, CF_CORES, CF_FREQS] = ...
    list_ThermalProfiler_files(varargin)
%
% Author: Charlie de Vivero
% Date  : 2015-02-21
%
% Organization:
%   Boston University PEAC Lab
%
% Function    : ThermalProfiler data file list
% Description : This procedure lists the data files generated by
%               ThermalProfiler, in either the current directory, or the
%               directory provided.
% 
%               ThermalProfiler files are expected to be named either
%               stat.csv, or stat<TAG>.csv, where <TAG> is any string.
%
%               if <TAG> is a string formatted as:
%               
%               _c<CORE>_<FREQ>M
%               
%               where <CORE> and <FREQ> are integers, then this function
%               will return an organized mapping of the files ordered by
%               core setting and frequency setting.
%
%
% Parameters  : DIRECTORY       - a string containing the name of the
%               (optional)        directory to be inspected
%
% Return      : TP_FILE_NAMES   - a [n x 1] cell array of all
%                                 ThermalProfiler data files found.
%
% Error Handling : Errors are handled internally, and an empty matrix
%                  is returned if there was a failure listing files.
%
% Examples of usage:
%
% >> [TP_FILE_NAMES, TP_FILE_TAGS, CF_INDEX_MAP, CF_CORES, CF_FREQS] = ...
%        list_ThermalProfiler_files
%
% TP_FILE_NAMES = 
% 
%     'stat_c1_594M.csv'
%     'stat_c2_594M.csv'
%     'stat_c3_594M.csv'
%     'stat_c4_594M.csv'
%     'stat_c1_810M.csv'
%     'stat_c2_810M.csv'
%     'stat_c3_810M.csv'
%     'stat_c4_810M.csv'
%     'stat_c1_1026M.csv'
%     'stat_c2_1026M.csv'
%     'stat_c3_1026M.csv'
%     'stat_c1_1242M.csv'
%     'stat_c2_1242M.csv'
% 
% 
% TP_FILE_TAGS = 
% 
%     '_c1_594M'
%     '_c2_594M'
%     '_c3_594M'
%     '_c4_594M'
%     '_c1_810M'
%     '_c2_810M'
%     '_c3_810M'
%     '_c4_810M'
%     '_c1_1026M'
%     '_c2_1026M'
%     '_c3_1026M'
%     '_c1_1242M'
%     '_c2_1242M'
% 
% 
% CF_INDEX_MAP =
% 
%      1     5     9    12
%      2     6    10    13
%      3     7    11     0
%      4     8     0     0
% 
% 
% CF_CORES =
% 
%      1
%      2
%      3
%      4
% 
% 
% CF_FREQS =
% 
%          594
%          810
%         1026
%         1242

TP_FILE_NAMES = {};
TP_FILE_TAGS  = {};
CF_INDEX_MAP  = [];
CF_CORES = [];
CF_FREQS = [];

% get input arguments
if (length(varargin) < 1)
    DIRECTORY = pwd;
elseif (length(varargin) > 1)
    error('util:list_ThermalProfiler_files', 'too many arguments');
else
    DIRECTORY = varargin{1};
end

% check input arguments
if (~ischar(DIRECTORY))
    error('util:list_ThermalProfiler_files', 'Argument DIRECTORY is not a string');
end

if (~exist(DIRECTORY,'dir'))
    error('util:list_ThermalProfiler_files', 'Argument "%s" is not a valid directory', DIRECTORY);
end

% remember current directory
original_dir = cd(DIRECTORY);

% list files in current directory
directories = dir;
dir_names = cell(length(directories), 1);
for i = 1:length(dir_names)
    if (directories(i).name(1) ~= '.')
        dir_names{i} = directories(i).name;
    end
end
dir_names = dir_names(~cellfun(@isempty, dir_names));

% assume files start with 'stat'
num_dirs = length(dir_names);
num_files = 0;
for i = 1:num_dirs
    [pathstr,name,ext] = fileparts(dir_names{i});
    tokens = sscanf(name, 'stat%s');
    if (numel(tokens) == 0 || ~strcmpi(ext,'.csv'))
        continue
    end
    
    num_files = num_files + 1;
    
    TP_FILE_NAMES{num_files} = dir_names{i};
    TP_FILE_TAGS{num_files} = tokens;
end

% re-arrange list of files if stat files are tagged with core/freq values
num_files = length(TP_FILE_NAMES);
tokens_core = [];
tokens_freq = [];

for i = 1:num_files
    file_tag = TP_FILE_TAGS{i};
    rem = file_tag;
    tokens = {};
    tokens_idx = 1;
    
    while (1)
        % split string
        [tok,rem] = strtok(rem, '_');
        if (~isempty(tok))
            tokens{tokens_idx} = tok;
            tokens_idx = tokens_idx + 1;
            
            tokens_core_val = sscanf(tok, 'c%d');
            if (~isempty(tokens_core_val))
                tokens_core(i,1) = tokens_core_val;
            end
            
            tokens_freq_val = sscanf(tok, '%dM');
            if (~isempty(tokens_freq_val) && strcmp(tokens_freq_val(end),'M'))
                tokens_freq(i,1) = tokens_freq_val;
            end
                
        end
        
        % break loop
        if (isempty(rem))
            break;
        end
    end
    
    %celldisp(tokens);
end

if (isempty(tokens_freq))
    return;
end

% order by frequency
[tokens_freq_ordered, new_idx_order] = sortrows(tokens_freq);
num_files = length(tokens_freq_ordered);
TP_FILE_NAMES_ordered = cell(num_files,1);
TP_FILE_TAGS_ordered  = cell(num_files,1);
tokens_core_ordered = zeros(num_files,1);

for i = 1:num_files
    tokens_core_ordered(i) = tokens_core(new_idx_order(i));
    TP_FILE_NAMES_ordered{i} = TP_FILE_NAMES{new_idx_order(i)};
    TP_FILE_TAGS_ordered{i} = TP_FILE_TAGS{new_idx_order(i)};
end

TP_FILE_NAMES = TP_FILE_NAMES_ordered;
TP_FILE_TAGS = TP_FILE_TAGS_ordered;

% create an index map which maps number of cores (row number),
% and frequency (column number), to an index in TP_FILE_NAMES
CF_CORES = unique(tokens_core_ordered);
CF_FREQS = unique(tokens_freq_ordered);
cores = length(CF_CORES);
freqs = length(CF_FREQS);
CF_INDEX_MAP = zeros(cores,freqs);

for i = 1:num_files
    core = tokens_core_ordered(i);
    core_idx = find(CF_CORES == core,1);
    
    freq = tokens_freq_ordered(i);
    freq_idx = find(CF_FREQS == freq,1);
    
    CF_INDEX_MAP(core_idx,freq_idx) = i;
end

cd(original_dir);
